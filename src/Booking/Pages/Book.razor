@page "/book"
@implements IAsyncDisposable
@implements IReservationObserver
@implements IRoomObserver
@using Booking.Models
@using Booking.Grains
@using System.ComponentModel.DataAnnotations
@inject IGrainFactory GrainFactory
@inject IJSRuntime JsRuntime

<PageTitle>Book</PageTitle>

<h1>Book</h1>

@if (_rooms == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <EditForm Model="@_inputModel" OnValidSubmit="@FetchTimeSlots">
        <DataAnnotationsValidator />

        <select @bind="_inputModel.RoomId">
            @foreach(var room in _rooms)
            {
                <option value="@room.Id">@room.Name</option>
            }
        </select>

        <input type="date" @bind="_inputModel.Date" @bind:format="yyyy-MM-dd">

        <button type="submit">Select</button>
    </EditForm>

    <hr/>

    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Start</th>
            <th>Stop</th>
            <th>Available</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var timeSlot in _timeSlots)
        {
            <tr @onclick="() => Reserve(timeSlot.Id)"
                class="clickable"
                style="@(timeSlot.Available ? "" : "background-color: red")">
                <td>@timeSlot.Date</td>
                <td>@timeSlot.Start</td>
                <td>@timeSlot.End</td>
                <td>@timeSlot.Available</td>
            </tr>
        }
        </tbody>
    </table>

    <hr/>

    @if (_reservation is not null)
    {
        if (_reservation.Success)
        {
            var expiresIn = Math.Max(0, (int)(_reservation.ExpiresOn!.Value - DateTimeOffset.UtcNow).TotalSeconds);

            <p>Reservation expires in @(expiresIn) seconds.</p>
            <button type="submit" onclick="@CancelReservation">Cancel</button>
            <button type="submit" onclick="@CompleteBooking">Book</button>
        }
        else
        {
            <p style="color: red">Reservation failed.</p>
        }
    }
}

@code {

    public class InputModel
    {
        [Required]
        public string? RoomId { get; set; }

        public DateTime Date { get; set; } = DateTime.Today;
    }

    private IReadOnlyCollection<Room>? _rooms;
    private IReadOnlyCollection<TimeSlot> _timeSlots = Array.Empty<TimeSlot>();

    private readonly InputModel _inputModel = new();
    private Reservation? _reservation;
    private Timer? _timer;
    private string? _observedRoomId;

    protected override async Task OnInitializedAsync()
    {
        var catalog = GrainFactory.GetGrain<IRoomCatalogGrain>(0);
        _rooms = await catalog.GetRooms();
        _inputModel.RoomId = _rooms.FirstOrDefault()?.Id;

        await FetchTimeSlots();
    }

    private async Task FetchTimeSlots()
    {
        var room = GrainFactory.GetGrain<IRoomGrain>(_inputModel.RoomId);

        _timeSlots = await room.GetTimeSlots(DateOnly.FromDateTime(_inputModel.Date));

        // Observe changes to the room.
        var observer = GrainFactory.CreateObjectReference<IRoomObserver>(this);
        await room.Subscribe(observer);

        // Unsubscribe from the previous room.
        if (_observedRoomId is not null
            && _observedRoomId != _inputModel.RoomId)
        {
            room = GrainFactory.GetGrain<IRoomGrain>(_observedRoomId);
            await room.Unsubscribe(observer);
        }

        // Remember the observed room.
        _observedRoomId = _inputModel.RoomId;
    }

    private async Task Reserve(string timeSlotId)
    {
        await ClearSelected();

        var timeSlot = GrainFactory.GetGrain<ITimeSlotGrain>(timeSlotId);
        var observer = GrainFactory.CreateObjectReference<IReservationObserver>(this);
        var reservation = await timeSlot.Reserve(observer);

        if (!reservation.Success)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Reservation failed");
            return;
        }

        _reservation = reservation;
        _timer = new Timer(Tick, null, 0, 1000);
    }

    private async Task CancelReservation()
    {
        if (_reservation is null)
        {
            return;
        }

        var timeSlot = GrainFactory.GetGrain<ITimeSlotGrain>(_reservation.TimeSlotId);
        var success = await timeSlot.CancelReservation(_reservation.ReservationId!);

        await JsRuntime.InvokeVoidAsync("alert", success
            ? "Reservation cancelled successfully"
            : "Unable to cancel reservation");

        _reservation = null;
        await ClearSelected();
    }

    private async Task CompleteBooking()
    {
        if (_reservation is null)
        {
            return;
        }

        var timeSlot = GrainFactory.GetGrain<ITimeSlotGrain>(_reservation.TimeSlotId);
        var success = await timeSlot.Book(_reservation.ReservationId!);

        await JsRuntime.InvokeVoidAsync("alert", success
            ? "Booking completed successfully"
            : "Unable to complete booking");

        _reservation = null;
        await ClearSelected();
    }

    private void Tick(object? _) => InvokeAsync(StateHasChanged);

    private async Task ClearSelected()
    {
        if (_timer is not null)
        {
            await _timer.DisposeAsync();
            _timer = null;
        }

        if (_reservation is not null)
        {
            var timeSlot = GrainFactory.GetGrain<ITimeSlotGrain>(_reservation.TimeSlotId);
            await timeSlot.CancelReservation(_reservation.ReservationId!);
            _reservation = null;
        }
    }

    public async Task OnReservationExpired()
    {
        await JsRuntime.InvokeVoidAsync("alert", "Reservation expired");

        _reservation = null;
        await ClearSelected();
        await InvokeAsync(StateHasChanged);
    }

    public async Task OnAvailabilityChanged(TimeSlot timeSlot)
    {
        if (timeSlot.Date != DateOnly.FromDateTime(_inputModel.Date))
        {
            return;
        }

        _timeSlots = _timeSlots
            .Select(x => x.Id == timeSlot.Id ? timeSlot : x)
            .ToArray();

        await InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        if (_timer is not null)
        {
            await _timer.DisposeAsync();
        }

        // Stop observing room.
        if (_observedRoomId is not null)
        {
            var room = GrainFactory.GetGrain<IRoomGrain>(_observedRoomId);
            var observer = GrainFactory.CreateObjectReference<IRoomObserver>(this);
            await room.Unsubscribe(observer);
        }
    }
}