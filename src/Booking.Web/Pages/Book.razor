@page "/book/{RoomId}"
@implements IAsyncDisposable
@implements IRoomObserver
@using Blazored.Toast.Services
@using Booking.Components
@inject IClusterClient ClusterClient
@inject IToastService ToastService

<PageTitle>Bookerizer 3000 - @_roomName</PageTitle>

<div class="row">
    <div class="col">
        <a class="btn btn-primary mt-2" href="/"><span class="oi oi-arrow-thick-left"></span>&nbsp;&nbsp;Back</a>
    </div>
    <div class="col">
        <h1 class="text-md-center">@_roomName</h1>
    </div>
    <div class="col"></div>
</div>


<TimeSlotDialog
    ToastService="ToastService"
    ClusterClient="ClusterClient"
    TimeSlot="_timeSlot"
    Reservation="_reservation"
    OnClosing="ClearSelected"
    @ref="_timeSlotDialog" />

<div class="row">
    <div class="col">
        <input class="form-control" type="date"
               @bind="_inputModel.From"
               @bind:after="FetchTimeSlots"
               @bind:format="yyyy-MM-dd">
    </div>

    <div class="col">
        <input class="form-control" type="date"
               @bind="_inputModel.To"
               @bind:after="FetchTimeSlots"
               @bind:format="yyyy-MM-dd">
    </div>
</div>

<hr/>

@if (_timeSlots.Count == 0)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    @foreach (var dayGroup in _timeSlots.GroupBy(x => x.Date))
    {
        <h3 class="mt-5">@dayGroup.Key.ToString("yyyy-MM-dd")</h3>

        <div class="row row-cols-1 row-cols-md-4 row-cols-sm-2 g-4">
            @foreach(var timeSlot in dayGroup)
            {
                <div class="col">
                    <div class="card h-100 @(timeSlot.Available ? string.Empty : "text-white bg-danger")">
                        <div class="card-header">
                            @timeSlot.Start - @timeSlot.End
                        </div>
                        <div class="card-body">
                            @(timeSlot.Available ? "Available" : "Not available")
                            <a @onclick="() => Reserve(timeSlot.Id)"
                               @onclick:preventDefault
                               href="#"
                               class="stretched-link"></a>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
}

@code {

    public class InputModel
    {
        public DateTime From { get; set; } = DateTime.Today;

        public DateTime To { get; set; } = DateTime.Today.AddDays(7);
    }

    [Parameter]
    public string RoomId { get; set; } = string.Empty;

    private string? _roomName;

    private IReadOnlyCollection<TimeSlot> _timeSlots = Array.Empty<TimeSlot>();

    private readonly InputModel _inputModel = new();
    private Reservation? _reservation;
    private TimeSlotDialog _timeSlotDialog = null!;
    private TimeSlot? _timeSlot;
    private Timer? _reservationTimer;
    private Timer? _roomObserverTimer;


    protected override async Task OnInitializedAsync()
    {
        using var _ = ActivityScope.Create(nameof(OnInitializedAsync));

        await SetRoomName();
        await SubscribeToRoom();
        await FetchTimeSlots();

        _roomObserverTimer = new Timer(ResubscribeToRoom,  null, 5000, 5000);
    }

    private async Task SetRoomName()
    {
        var catalog = ClusterClient.GetGrain<IRoomCatalogGrain>(0);
        var rooms = await catalog.GetRooms();

        _roomName = rooms.FirstOrDefault(x => string.Equals(x.Id, RoomId, StringComparison.Ordinal))?.Name;
    }

    private async Task FetchTimeSlots()
    {
        using var _ = ActivityScope.Create(nameof(FetchTimeSlots));

        var room = ClusterClient.GetGrain<IRoomGrain>(RoomId);

        _timeSlots = await room.GetTimeSlots(
            DateOnly.FromDateTime(_inputModel.From),
            DateOnly.FromDateTime(_inputModel.To));
    }

    private async Task Reserve(string timeSlotId)
    {
        using var _ = ActivityScope.Create(nameof(Reserve));

        await ClearSelected();

        var timeSlot = ClusterClient.GetGrain<ITimeSlotGrain>(timeSlotId);
        var reservation = await timeSlot.Reserve();

        if (!reservation.Success)
        {
            ToastService.ShowError("Reservation failed.");
            return;
        }

        _reservation = reservation;
        _reservationTimer = new Timer(TickReservationTimer, null, 0, 1000);

        _timeSlot = TimeSlot.TryParse(timeSlotId, out var ts) ? ts : null;

        _timeSlotDialog.Open();
    }

    private async Task ClearSelected()
    {
        if (_reservationTimer is not null)
        {
            await _reservationTimer.DisposeAsync();
            _reservationTimer = null;
        }

        _reservation = null;
        _timeSlot = null;
    }

    private async Task OnReservationExpired()
    {

        ToastService.ShowWarning("Reservation expired");

        _reservation = null;
        await ClearSelected();
        await InvokeAsync(async () =>
        {
            await _timeSlotDialog.Close();
            StateHasChanged();
        });
    }

    public async Task OnAvailabilityChanged(TimeSlot timeSlot)
    {
        if (timeSlot.Date < DateOnly.FromDateTime(_inputModel.From)
            || timeSlot.Date > DateOnly.FromDateTime(_inputModel.To))
        {
            return;
        }

        _timeSlots = _timeSlots
            .Select(x => x.Id == timeSlot.Id ? timeSlot : x)
            .ToArray();

        await InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        if (_roomObserverTimer is not null)
        {
            await _roomObserverTimer.DisposeAsync();
        }

        if (_reservationTimer is not null)
        {
            await _reservationTimer.DisposeAsync();
        }

        // Stop observing room.
        var room = ClusterClient.GetGrain<IRoomGrain>(RoomId);
        var observer = ClusterClient.CreateObjectReference<IRoomObserver>(this);
        await room.Unsubscribe(observer);
    }

    private async void ResubscribeToRoom(object? _) => await SubscribeToRoom();

    private async Task SubscribeToRoom()
    {
        var room = ClusterClient.GetGrain<IRoomGrain>(RoomId);
        var observer = ClusterClient.CreateObjectReference<IRoomObserver>(this);
        await room.Subscribe(observer);
    }

    private async void TickReservationTimer(object? _)
    {
        if (_reservation?.ExpiresOn <= DateTimeOffset.UtcNow)
        {
            await OnReservationExpired();
        }

        await InvokeAsync(StateHasChanged);
    }

}