@using Blazored.Toast.Services
<div class="modal @_modalClass"
     data-bs-backdrop="static"
     data-bs-keyboard="false"
     tabindex="-1"
     aria-labelledby="staticBackdropLabel"
     aria-hidden="true"
     style="display:@_modalDisplay">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="staticBackdropLabel">Modal title</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        ...
      </div>
      <div class="modal-footer">
        @if (Reservation is not null)
        {
          var expiresIn = Math.Max(0, (int)(Reservation.ExpiresOn!.Value - DateTimeOffset.UtcNow).TotalSeconds);

          <p>Reservation expires in @(expiresIn) seconds.</p>
          <button class="btn btn-danger" type="submit" onclick="@CancelReservation">Cancel</button>
          <button class="btn btn-primary" type="submit" onclick="@CompleteBooking">Book</button>
        }
      </div>
    </div>
  </div>
</div>

@if (_showBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {

  [Parameter, EditorRequired]
  public TimeSlot? TimeSlot { get; set; }

  [Parameter, EditorRequired]
  public Reservation? Reservation { get; set; }

  [Parameter, EditorRequired]
  public IClusterClient ClusterClient { get; set; } = null!;

  [Parameter, EditorRequired]
  public IToastService ToastService { get; set; } = null!;

  string _modalDisplay = "none;";
  string _modalClass = "";
  bool _showBackdrop = false;

  public void Open()
  {
    _modalDisplay = "block;";
    _modalClass = "Show";
    _showBackdrop = true;
    StateHasChanged();
  }

  public void Close()
  {
    _modalDisplay = "none";
    _modalClass = "fade";
    _showBackdrop = false;
    StateHasChanged();
  }


  private async Task CancelReservation()
  {
    using var _ = ActivityScope.Create(nameof(CancelReservation));

    var timeSlot = ClusterClient.GetGrain<ITimeSlotGrain>(Reservation.TimeSlotId);
    var success = await timeSlot.CancelReservation(Reservation.ReservationId!);

    if (success)
    {
      ToastService.ShowSuccess("Reservation cancelled");
    }
    else
    {
      ToastService.ShowError("Unable to cancel reservation");
    }

    Close();
  }

  private async Task CompleteBooking()
  {
    using var _ = ActivityScope.Create(nameof(CompleteBooking));

    var timeSlot = ClusterClient.GetGrain<ITimeSlotGrain>(Reservation.TimeSlotId);
    var success = await timeSlot.Book(Reservation.ReservationId!);

    if (success)
    {
      ToastService.ShowSuccess("Booking completed");
    }
    else
    {
      ToastService.ShowError("Unable to complete booking");
    }

    Close();
  }
}